{"version":3,"sources":["services/numbers.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","PersonForm","props","onSubmit","function","value","name","onChange","personHandler","number","numberHandler","type","Notification","message","className","Filter","eventHandler","Persons","persons","map","kikkare","key","onClick","App","useState","setPersons","visiblePersons","setVisiblePersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","errorMessage","setErrorMessage","showMessage","setTimeout","useEffect","copy","includes","console","log","push","server","then","response","data","event","target","preventDefault","duplicate","newperson","window","confirm","catch","error","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0OACMA,EAAU,eAgBD,EAdA,WACb,OAAOC,IAAMC,IAAIF,IAaJ,EAVA,SAAAG,GACb,OAAOF,IAAMG,KAAKJ,EAASG,IASd,EAJA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,IAGxB,EAPC,SAAAE,GACd,OAAOJ,IAAMM,OAAN,UAAgBP,EAAhB,YAA2BK,KCP9BG,EAAa,SAACC,GAClB,OACE,0BAAMC,SAAUD,EAAME,UACtB,sCAAW,2BAAOC,MAAOH,EAAMI,KAAMC,SAAUL,EAAMM,iBACrD,wCAAa,2BAAOH,MAAOH,EAAMO,OAAQF,SAAUL,EAAMQ,iBACzD,6BAAK,4BAAQC,KAAK,UAAb,UAKHC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,IAIDE,EAAS,SAACb,GACd,OACE,oDAAyB,2BAAOG,MAAOH,EAAMG,MAAOE,SAAUL,EAAMc,iBAGlEC,EAAU,SAACf,GAEf,IAAMgB,EAAQhB,EAAMgB,QACpB,OACE,oCACCA,EAAQC,KAAI,SAAAC,GAAO,OAClB,uBAAGC,IAAKD,EAAQtB,IAAKsB,EAAQd,KAA7B,IAAoCc,EAAQX,OAA5C,KAAqD,4BAAQa,QAAS,WAAOpB,EAAME,SAASgB,EAAQtB,MAA/C,gBAgI5CyB,EA3HH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTN,EADS,KACAO,EADA,OAE0BD,mBAASN,GAFnC,mBAETQ,EAFS,KAEOC,EAFP,OAGgBH,mBAAS,IAHzB,mBAGRI,EAHQ,KAGCC,EAHD,OAIkBL,mBAAS,IAJ3B,mBAITM,EAJS,KAIEC,EAJF,OAKYP,mBAAS,IALrB,mBAKTQ,EALS,KAKDC,EALC,OAMwBT,mBAAS,MANjC,mBAMTU,EANS,KAMKC,EANL,KAOVC,EAAc,SAAAvB,GAClBsB,EAAgBtB,GAChBwB,YAAW,WACTF,EAAgB,QACb,MAiBPG,qBAAU,WACR,IADc,EACVC,EAAK,GADK,cAEIrB,GAFJ,IAEd,2BAA0B,CAAC,IAAlBb,EAAiB,QACpBA,EAAMC,KAAKkC,SAASR,KACtBS,QAAQC,IAAI,QAASrC,EAAMC,MAC3BmC,QAAQC,IAAI,cAAeV,GAC3BO,EAAKI,KAAKtC,GACVoC,QAAQC,IAAIH,KAPF,8BAUdZ,EAAkBY,KAEjB,CAACP,IAEHM,qBAAU,WACTX,EAAkBT,KACjB,CAACA,IAEHoB,qBAAU,WACTG,QAAQC,IAAI,UACZE,IACCC,MAAK,SAAAC,GACJrB,EAAWqB,EAASC,MACpBN,QAAQC,IAAI,UAAUxB,QAEvB,IAoDH,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcL,QAASqB,IAEvB,kBAAC,EAAD,CAAQ7B,MAAO2B,EAAQhB,aAVA,SAACgC,GAC1BP,QAAQC,IAAIM,EAAMC,OAAO5C,OACzB4B,EAAUe,EAAMC,OAAO5C,UAUrB,wCACA,kBAAC,EAAD,CAAYD,SA3DE,SAAC4C,GACbA,EAAME,iBACN,IAFuB,EAEnBC,EAAU,EACVC,EAAU,CAAE9C,KAAMsB,EAASnB,OAAQqB,GAHhB,cAILZ,GAJK,IAIvB,2BAA0B,CAAC,IAAlBb,EAAiB,QACrBA,EAAMC,OAAOsB,GACXyB,OAAOC,QAAQ,4BAA8BjD,EAAMC,QACtDsC,EAAcvC,EAAMP,GAAIsD,GACvBP,MAAK,SAAAC,GACJL,QAAQC,IAAII,GACZF,IACCC,MAAK,SAAAC,GACJrB,EAAWqB,EAASC,YAGvBQ,OAAM,SAAAC,GAAUpB,EAAYR,EAAU,oDACvCuB,EAAU,IAhBS,8BAoBR,IAAZA,GACDP,EAAcQ,GACbP,MAAK,SAAAC,GACNL,QAAQC,IAAII,EAASC,MACrBtB,EAAWP,EAAQuC,OAAOL,IAC1BhB,EAAY,UAAYR,EAAU,aAEnC2B,OAAM,SAAAC,GAAUpB,EAAYR,EAAU,wBAIvCC,EAAW,IACXE,EAAa,IACbU,QAAQC,IAAIxB,GACZuB,QAAQC,IAAI,iBAAkBM,EAAMC,SAyBLzC,cArBV,SAACwC,GAC1BP,QAAQC,IAAIM,EAAMC,OAAO5C,OACzBwB,EAAWmB,EAAMC,OAAO5C,QAmB8CC,KAAMsB,EAASnB,OAAQqB,EAAWpB,cAjB/E,SAACsC,GAC1BP,QAAQC,IAAIM,EAAMC,OAAO5C,OACzB0B,EAAaiB,EAAMC,OAAO5C,UAiBrB,uCACH,kBAAC,EAAD,CAASa,QAASQ,EAAgBtB,SAvGf,SAAAN,GAClBuD,OAAOC,QAAQ,aAClBV,EAAe9C,GACd+C,MAAK,SAAAC,GACJL,QAAQC,IAAII,EAASC,MACrBH,IACCC,MAAK,SAAAC,GACJrB,EAAWqB,EAASC,SAErBQ,OAAM,SAAAC,GAAUpB,EAAY,wCAA0CtC,cCnDzD4D,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAM3C,a","file":"static/js/main.b1d13f3f.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\nconst deleter = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update, \n  deleter: deleter\n}\n","import React, { useState, useEffect  } from 'react'\nimport axios from 'axios'\nimport server from './services/numbers'\nimport './index.css'\nconst PersonForm = (props) =>{\n  return(\n    <form onSubmit={props.function}>\n    <div>name: <input value={props.name} onChange={props.personHandler}/></div>\n    <div>number: <input value={props.number} onChange={props.numberHandler} /></div>\n    <div><button type=\"submit\">add</button></div>\n  </form>\n  )\n\n}\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\nconst Filter = (props) =>{\n  return(\n    <div> Filter shown with: <input value={props.value} onChange={props.eventHandler}/></div>\n  )\n}\nconst Persons = (props) =>{\n\n  const persons=props.persons\n  return (\n    <>\n    {persons.map(kikkare =>\n      <p key={kikkare.id}>{kikkare.name} {kikkare.number}  <button onClick={() => {props.function(kikkare.id)}}>Delete</button></p>\n        )}\n  </>)\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [visiblePersons, setVisiblePersons]=useState(persons)\n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const showMessage = message =>{\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)        \n      }, 5000)\n  }\n  const buttonFunction = id =>{\n    if(window.confirm(\"REALLY?!\")){\n    server.deleter(id)\n    .then(response => {\n      console.log(response.data)\n      server.getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n      .catch(error => {showMessage(\"Person with this id can't be deleted:\" + id)})      \n    }\n    )\n    \n  }\n  }\n  useEffect(() => { \n    let copy=[]\n    for (var value of persons){\n      if (value.name.includes(filter)){\n        console.log(\"found\", value.name)\n        console.log(\"with filter\", filter)\n        copy.push(value)\n        console.log(copy)\n      }\n    }\n    setVisiblePersons(copy)\n\n   },[filter]);\n\n   useEffect(() => { \n    setVisiblePersons(persons)\n   },[persons]);\n\n   useEffect(() => {\n    console.log('effect')\n    server.getAll()\n    .then(response => {\n      setPersons(response.data)\n      console.log('persons',persons)\n    })\n  }, [])\n  const addPerson = (event) => {    \n        event.preventDefault()\n        let duplicate=0;\n        let newperson={ name: newName, number: newNumber };\n        for (var value of persons){\n          if(value.name===newName){\n            if(window.confirm(\"REALLY UPDATE THIS NAME?!\" + value.name)){\n            server.update(value.id, newperson)\n            .then(response=>{\n              console.log(response)\n              server.getAll()\n              .then(response => {\n                setPersons(response.data)\n              })\n            })\n            .catch(error => {showMessage(newName + \"may not be updated, maby its already removed?\")})\n            duplicate=1;\n            }\n          }\n        }\n        if(duplicate===0){\n          server.create(newperson)  \n          .then(response => {      \n          console.log(response.data )\n          setPersons(persons.concat(newperson))\n          showMessage(\"Person \" + newName + \" added\")  \n        })\n        .catch(error => {showMessage(newName + \" can't be created\")})\n        \n        }\n        \n        setNewName('')\n        setNewNumber('')\n        console.log(persons)\n        console.log('button clicked', event.target)}\n        \n  \n\n  const handlePersonChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage}/>\n      \n      <Filter value={filter} eventHandler={handleFilterChange} />\n      \n      <h2>add new:</h2>\n      <PersonForm function={addPerson} personHandler={handlePersonChange} name={newName} number={newNumber} numberHandler={handleNumberChange} />\n\n         <h2>Numbers</h2>\n      <Persons persons={visiblePersons} function={buttonFunction}/>\n\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}